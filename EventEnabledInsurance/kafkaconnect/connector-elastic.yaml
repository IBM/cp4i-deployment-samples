apiVersion: eventstreams.ibm.com/v1alpha1
kind: KafkaConnector
metadata:
  name: eei-elastic
  labels:
    eventstreams.ibm.com/cluster: eei-cluster
spec:
  # This uses the Elasticsearch plugin from the KafkaConnectS2I
  class: com.ibm.eventstreams.connect.elasticsink.ElasticSinkConnector
  tasksMax: 1
  config:
    # Monitors the topic that is being populated by the postgres connector.
    topics: sor.public.quotes
    # The following credentials refer to the mounted secret and use the FileConfigProvider
    # from the KafkaConnectS2I to extract properties from the properties file.
    es.connection: "${file:/opt/kafka/external-configuration/elastic-connector-config/connector.properties:dbConnection}"
    es.user.name: "${file:/opt/kafka/external-configuration/elastic-connector-config/connector.properties:dbUser}"
    es.password: "${file:/opt/kafka/external-configuration/elastic-connector-config/connector.properties:dbPassword}"
    # Use the default document/index builders
    es.document.builder: com.ibm.eventstreams.connect.elasticsink.builders.JsonDocumentBuilder
    es.index.builder: com.ibm.eventstreams.connect.elasticsink.builders.DefaultIndexBuilder
    # Use the KeyIdentifierBuilder to do CDC, so the Elasticsearch index only includes
    # the latest copy of all rows from the original data.
    es.identifier.builder: com.ibm.eventstreams.connect.elasticsink.builders.KeyIdentifierBuilder
    # Setup the truststore to trust the Elasticsearch self signed certificate. The Elasticsearch
    # operator creates this certificate and the prereqs create a jks truststore from it and
    # add it to a secret that gets mounted into the connector pod.
    es.tls.truststore.location: /opt/kafka/external-configuration/elastic-connector-config/elastic-ts.jks
    es.tls.truststore.password: "${file:/opt/kafka/external-configuration/elastic-connector-config/connector.properties:truststorePassword}"
